// Code generated by MockGen. DO NOT EDIT.
// Source: author_grpc.pb.go

// Package mock_author is a generated GoMock package.
package mock_author

import (
	context "context"
	author "library-comp/proto/author/author"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockAuthorServiceClient is a mock of AuthorServiceClient interface.
type MockAuthorServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorServiceClientMockRecorder
}

// MockAuthorServiceClientMockRecorder is the mock recorder for MockAuthorServiceClient.
type MockAuthorServiceClientMockRecorder struct {
	mock *MockAuthorServiceClient
}

// NewMockAuthorServiceClient creates a new mock instance.
func NewMockAuthorServiceClient(ctrl *gomock.Controller) *MockAuthorServiceClient {
	mock := &MockAuthorServiceClient{ctrl: ctrl}
	mock.recorder = &MockAuthorServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorServiceClient) EXPECT() *MockAuthorServiceClientMockRecorder {
	return m.recorder
}

// CreateAuthor mocks base method.
func (m *MockAuthorServiceClient) CreateAuthor(ctx context.Context, in *author.CreateAuthorRequest, opts ...grpc.CallOption) (*author.CreateAuthorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAuthor", varargs...)
	ret0, _ := ret[0].(*author.CreateAuthorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuthor indicates an expected call of CreateAuthor.
func (mr *MockAuthorServiceClientMockRecorder) CreateAuthor(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthor", reflect.TypeOf((*MockAuthorServiceClient)(nil).CreateAuthor), varargs...)
}

// DeleteAuthor mocks base method.
func (m *MockAuthorServiceClient) DeleteAuthor(ctx context.Context, in *author.DeleteAuthorRequest, opts ...grpc.CallOption) (*author.DeleteAuthorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAuthor", varargs...)
	ret0, _ := ret[0].(*author.DeleteAuthorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAuthor indicates an expected call of DeleteAuthor.
func (mr *MockAuthorServiceClientMockRecorder) DeleteAuthor(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthor", reflect.TypeOf((*MockAuthorServiceClient)(nil).DeleteAuthor), varargs...)
}

// GetAuthor mocks base method.
func (m *MockAuthorServiceClient) GetAuthor(ctx context.Context, in *author.GetAuthorRequest, opts ...grpc.CallOption) (*author.GetAuthorResonse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAuthor", varargs...)
	ret0, _ := ret[0].(*author.GetAuthorResonse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthor indicates an expected call of GetAuthor.
func (mr *MockAuthorServiceClientMockRecorder) GetAuthor(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthor", reflect.TypeOf((*MockAuthorServiceClient)(nil).GetAuthor), varargs...)
}

// GetListofAuthors mocks base method.
func (m *MockAuthorServiceClient) GetListofAuthors(ctx context.Context, in *author.GetListOfAuthorsRequest, opts ...grpc.CallOption) (*author.GetListOfAuthorsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetListofAuthors", varargs...)
	ret0, _ := ret[0].(*author.GetListOfAuthorsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListofAuthors indicates an expected call of GetListofAuthors.
func (mr *MockAuthorServiceClientMockRecorder) GetListofAuthors(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListofAuthors", reflect.TypeOf((*MockAuthorServiceClient)(nil).GetListofAuthors), varargs...)
}

// UpdateAuthor mocks base method.
func (m *MockAuthorServiceClient) UpdateAuthor(ctx context.Context, in *author.UpdateAuthorRequest, opts ...grpc.CallOption) (*author.UpdateAuthorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAuthor", varargs...)
	ret0, _ := ret[0].(*author.UpdateAuthorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAuthor indicates an expected call of UpdateAuthor.
func (mr *MockAuthorServiceClientMockRecorder) UpdateAuthor(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthor", reflect.TypeOf((*MockAuthorServiceClient)(nil).UpdateAuthor), varargs...)
}

// MockAuthorServiceServer is a mock of AuthorServiceServer interface.
type MockAuthorServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorServiceServerMockRecorder
}

// MockAuthorServiceServerMockRecorder is the mock recorder for MockAuthorServiceServer.
type MockAuthorServiceServerMockRecorder struct {
	mock *MockAuthorServiceServer
}

// NewMockAuthorServiceServer creates a new mock instance.
func NewMockAuthorServiceServer(ctrl *gomock.Controller) *MockAuthorServiceServer {
	mock := &MockAuthorServiceServer{ctrl: ctrl}
	mock.recorder = &MockAuthorServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorServiceServer) EXPECT() *MockAuthorServiceServerMockRecorder {
	return m.recorder
}

// CreateAuthor mocks base method.
func (m *MockAuthorServiceServer) CreateAuthor(arg0 context.Context, arg1 *author.CreateAuthorRequest) (*author.CreateAuthorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthor", arg0, arg1)
	ret0, _ := ret[0].(*author.CreateAuthorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuthor indicates an expected call of CreateAuthor.
func (mr *MockAuthorServiceServerMockRecorder) CreateAuthor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthor", reflect.TypeOf((*MockAuthorServiceServer)(nil).CreateAuthor), arg0, arg1)
}

// DeleteAuthor mocks base method.
func (m *MockAuthorServiceServer) DeleteAuthor(arg0 context.Context, arg1 *author.DeleteAuthorRequest) (*author.DeleteAuthorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthor", arg0, arg1)
	ret0, _ := ret[0].(*author.DeleteAuthorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAuthor indicates an expected call of DeleteAuthor.
func (mr *MockAuthorServiceServerMockRecorder) DeleteAuthor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthor", reflect.TypeOf((*MockAuthorServiceServer)(nil).DeleteAuthor), arg0, arg1)
}

// GetAuthor mocks base method.
func (m *MockAuthorServiceServer) GetAuthor(arg0 context.Context, arg1 *author.GetAuthorRequest) (*author.GetAuthorResonse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthor", arg0, arg1)
	ret0, _ := ret[0].(*author.GetAuthorResonse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthor indicates an expected call of GetAuthor.
func (mr *MockAuthorServiceServerMockRecorder) GetAuthor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthor", reflect.TypeOf((*MockAuthorServiceServer)(nil).GetAuthor), arg0, arg1)
}

// GetListofAuthors mocks base method.
func (m *MockAuthorServiceServer) GetListofAuthors(arg0 context.Context, arg1 *author.GetListOfAuthorsRequest) (*author.GetListOfAuthorsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListofAuthors", arg0, arg1)
	ret0, _ := ret[0].(*author.GetListOfAuthorsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListofAuthors indicates an expected call of GetListofAuthors.
func (mr *MockAuthorServiceServerMockRecorder) GetListofAuthors(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListofAuthors", reflect.TypeOf((*MockAuthorServiceServer)(nil).GetListofAuthors), arg0, arg1)
}

// UpdateAuthor mocks base method.
func (m *MockAuthorServiceServer) UpdateAuthor(arg0 context.Context, arg1 *author.UpdateAuthorRequest) (*author.UpdateAuthorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthor", arg0, arg1)
	ret0, _ := ret[0].(*author.UpdateAuthorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAuthor indicates an expected call of UpdateAuthor.
func (mr *MockAuthorServiceServerMockRecorder) UpdateAuthor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthor", reflect.TypeOf((*MockAuthorServiceServer)(nil).UpdateAuthor), arg0, arg1)
}

// mustEmbedUnimplementedAuthorServiceServer mocks base method.
func (m *MockAuthorServiceServer) mustEmbedUnimplementedAuthorServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAuthorServiceServer")
}

// mustEmbedUnimplementedAuthorServiceServer indicates an expected call of mustEmbedUnimplementedAuthorServiceServer.
func (mr *MockAuthorServiceServerMockRecorder) mustEmbedUnimplementedAuthorServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAuthorServiceServer", reflect.TypeOf((*MockAuthorServiceServer)(nil).mustEmbedUnimplementedAuthorServiceServer))
}

// MockUnsafeAuthorServiceServer is a mock of UnsafeAuthorServiceServer interface.
type MockUnsafeAuthorServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAuthorServiceServerMockRecorder
}

// MockUnsafeAuthorServiceServerMockRecorder is the mock recorder for MockUnsafeAuthorServiceServer.
type MockUnsafeAuthorServiceServerMockRecorder struct {
	mock *MockUnsafeAuthorServiceServer
}

// NewMockUnsafeAuthorServiceServer creates a new mock instance.
func NewMockUnsafeAuthorServiceServer(ctrl *gomock.Controller) *MockUnsafeAuthorServiceServer {
	mock := &MockUnsafeAuthorServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAuthorServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAuthorServiceServer) EXPECT() *MockUnsafeAuthorServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAuthorServiceServer mocks base method.
func (m *MockUnsafeAuthorServiceServer) mustEmbedUnimplementedAuthorServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAuthorServiceServer")
}

// mustEmbedUnimplementedAuthorServiceServer indicates an expected call of mustEmbedUnimplementedAuthorServiceServer.
func (mr *MockUnsafeAuthorServiceServerMockRecorder) mustEmbedUnimplementedAuthorServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAuthorServiceServer", reflect.TypeOf((*MockUnsafeAuthorServiceServer)(nil).mustEmbedUnimplementedAuthorServiceServer))
}
